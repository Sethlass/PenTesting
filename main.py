import warnings
import time
import socket
import requests
from scapy.all import ARP, Ether, srp, ICMP, IP, TCP, sr1, conf, IPv6, ICMPv6ND_NS, ICMPv6ND_NA
import nmap  # Requires the python-nmap module
import subprocess

# Suppress specific warnings related to Wireshark manuf
warnings.filterwarnings("ignore", category=UserWarning, message=".*cannot read manuf.*")

# Initialize Nmap scanner
nmap_scanner = nmap.PortScanner()

print("Running with macvendors.co for manufacturer resolution and vulnerability detection.")

def resolve_mac_to_manufacturer(mac_address):
    """
    Resolves a MAC address to its manufacturer using Macvendors.co API.
    """
    try:
        response = requests.get(f"https://api.macvendors.com/{mac_address}")
        if response.status_code == 200:
            return response.text
        else:
            return "Unknown"
    except Exception as e:
        print(f"Error resolving MAC address {mac_address}: {e}")
        return "Unknown"

def resolve_hostname(ip):
    """
    Resolves the hostname for a given IP address using reverse DNS lookup.
    """
    try:
        hostname = socket.gethostbyaddr(ip)[0]
        return hostname
    except socket.herror:
        return "Unknown"

def query_netbios(ip):
    """
    Queries NetBIOS information using Nmap's nbstat script to identify the device.
    """
    try:
        nmap_scanner.scan(ip, arguments='-sU --script nbstat.nse -p 137')
        for host in nmap_scanner.all_hosts():
            if 'udp' in nmap_scanner[host] and 137 in nmap_scanner[host]['udp']:
                output = nmap_scanner[host]['udp'][137].get('script', {}).get('nbstat', '')
                return output
    except Exception as e:
        print(f"Error querying NetBIOS for {ip}: {e}")
    return "Unknown"

def ping_device(ip):
    """
    Pings a device to check its availability and tries to gather additional info.
    """
    print(f"Pinging {ip}...")
    try:
        # Basic ping command, works on Windows and Linux
        response = subprocess.run(['ping', '-n', '1', ip], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        if response.returncode == 0:
            print(f"Device {ip} is reachable.")
            # Additional identification steps
            hostname = resolve_hostname(ip)
            netbios_info = query_netbios(ip)
            print(f"Hostname: {hostname}, NetBIOS: {netbios_info}")
            return hostname, netbios_info
        else:
            print(f"Device {ip} is not reachable.")
    except Exception as e:
        print(f"Error pinging {ip}: {e}")
    return "Unknown", "Unknown"

def basic_vulnerability_check(ip, open_ports):
    """
    Checks for common vulnerabilities based on open ports and services.
    """
    vulnerabilities = []

    if 22 in open_ports:
        vulnerabilities.append("SSH open on port 22 - check for weak passwords or outdated versions.")

    if 23 in open_ports:
        vulnerabilities.append("Telnet open on port 23 - insecure, consider disabling or using SSH.")

    if 80 in open_ports:
        vulnerabilities.append("HTTP open on port 80 - check for outdated web server software and known vulnerabilities.")

    if 443 in open_ports:
        vulnerabilities.append("HTTPS open on port 443 - check for outdated SSL/TLS versions and configurations.")

    if 445 in open_ports:
        vulnerabilities.append("SMB open on port 445 - check for EternalBlue and other SMB vulnerabilities.")

    print(f"Running Nmap vulnerability scan on {ip}")
    try:
        nmap_scanner.scan(ip, arguments='--script vuln')
        for host in nmap_scanner.all_hosts():
            for proto in nmap_scanner[host].all_protocols():
                for port in nmap_scanner[host][proto]:
                    if 'script' in nmap_scanner[host][proto][port]:
                        for script, output in nmap_scanner[host][proto][port]['script'].items():
                            vulnerabilities.append(f"Vulnerability found on port {port}: {script} - {output}")
    except Exception as e:
        print(f"Error running Nmap scan on {ip}: {e}")

    return vulnerabilities

def arp_scan(ip_range, iface="Ethernet"):
    print(f"Starting ARP scan on network: {ip_range}")
    start_time = time.time()
    conf.iface = iface
    arp_request = ARP(pdst=ip_range)
    broadcast = Ether(dst="ff:ff:ff:ff:ff:ff")
    arp_request_broadcast = broadcast / arp_request

    answered_list, _ = srp(arp_request_broadcast, timeout=5, retry=3, verbose=True)

    if not answered_list:
        print("No devices found via ARP. Check your network range, permissions, or firewall settings.")
        return

    for sent, received in answered_list:
        manufacturer = resolve_mac_to_manufacturer(received.hwsrc)
        hostname, netbios_info = ping_device(received.psrc)
        open_ports = tcp_syn_scan(received.psrc)
        vulnerabilities = basic_vulnerability_check(received.psrc, open_ports)
        print(f"IP: {received.psrc}, MAC: {received.hwsrc}, Manufacturer: {manufacturer}, Hostname: {hostname}, NetBIOS: {netbios_info}")
        if vulnerabilities:
            print("Potential Vulnerabilities:")
            for vuln in vulnerabilities:
                print(f"  - {vuln}")
    
    print(f"ARP scan completed in {time.time() - start_time:.2f} seconds.")

def icmp_ping_sweep(ip_range):
    print(f"Starting ICMP ping sweep on network: {ip_range}")
    start_time = time.time()
    live_hosts = []
    for i in range(1, 255):
        ip_address = ip_range[:-4] + str(i)
        icmp_request = IP(dst=ip_address) / ICMP()
        response = sr1(icmp_request, timeout=1, verbose=0)
        if response:
            live_hosts.append(ip_address)
            print(f"Host {ip_address} is alive via ICMP ping.")

    if not live_hosts:
        print("No devices found via ICMP ping sweep.")
    
    print(f"ICMP ping sweep completed in {time.time() - start_time:.2f} seconds.")

def tcp_syn_scan(ip_address, ports=[22, 23, 80, 443, 445]):
    print(f"Starting TCP SYN scan on {ip_address} for ports {ports}")
    start_time = time.time()
    open_ports = []
    for port in ports:
        syn_packet = IP(dst=ip_address) / TCP(dport=port, flags="S")
        response = sr1(syn_packet, timeout=1, verbose=0)
        if response and response.haslayer(TCP) and response[TCP].flags == 0x12:  # SYN-ACK
            open_ports.append(port)
            print(f"Port {port} is open on {ip_address}.")
    
    print(f"TCP SYN scan on {ip_address} completed in {time.time() - start_time:.2f} seconds.")
    return open_ports

def ipv6_ndp_scan(target_ip):
    print(f"Starting IPv6 NDP scan on target: {target_ip}")
    start_time = time.time()
    ns_packet = IPv6(dst=target_ip) / ICMPv6ND_NS(tgt=target_ip)
    response = sr1(ns_packet, timeout=1, verbose=0)
    if response and response.haslayer(ICMPv6ND_NA):
        print(f"Host {target_ip} responded to NDP.")
    
    print(f"IPv6 NDP scan completed in {time.time() - start_time:.2f} seconds.")

def run_all_scans():
    total_start_time = time.time()
    network_ranges = {
        "Ethernet 2": "192.168.56.0/24",
        "Wi-Fi": "10.30.112.0/20",
        "VMnet1": "192.168.219.0/24",
        "VMnet8": "192.168.32.0/24"
    }

    for iface, ip_range in network_ranges.items():
        arp_scan(ip_range, iface)
        icmp_ping_sweep(ip_range)
        tcp_syn_scan(ip_range[:-4] + "1")  # Example scan on the first IP in range

    ipv6_ndp_scan("fe80::1523:fa3e:62a8:3d09")  # Example IPv6 NDP scan
    print(f"All scans completed in {time.time() - total_start_time:.2f} seconds.")

if __name__ == "__main__":
    run_all_scans()
